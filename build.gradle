import org.gradle.internal.os.OperatingSystem

apply plugin: 'java'
apply plugin: 'java-library'

version = "${arc3d_version}"
group = 'icyllis.arc3d'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.jetbrains:annotations:26.0.2'

    api 'org.jspecify:jspecify:1.0.0'

    api "org.slf4j:slf4j-api:${slf4j_version}"
    implementation "it.unimi.dsi:fastutil:${fastutil_version}"

    def lwjglNatives
    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            lwjglNatives = osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
            break
        case OperatingSystem.MAC_OS:
            lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
            break
        default:
            def osArch = System.getProperty("os.arch")
            lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                    ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                    : "natives-linux"
            break
    }

    implementation platform("org.lwjgl:lwjgl-bom:${lwjgl_version}")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-jemalloc"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-opengles"
    implementation "org.lwjgl:lwjgl-vma"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-jemalloc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengles::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") {
        runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"
    }

    compileOnly "org.lwjgl:lwjgl-spvc" // we only use the Spv header

    testImplementation "org.lwjgl:lwjgl-glfw"
    testImplementation "org.lwjgl:lwjgl-stb"
    testImplementation "org.lwjgl:lwjgl-shaderc"
    testImplementation "org.lwjgl:lwjgl-tinyfd"
    testImplementation "org.lwjgl:lwjgl-spvc"
    testRuntimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    testRuntimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    testRuntimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
    testRuntimeOnly "org.lwjgl:lwjgl-tinyfd::$lwjglNatives"
    testRuntimeOnly "org.lwjgl:lwjgl-spvc::$lwjglNatives"

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"

    testImplementation 'org.openjdk.jmh:jmh-core:1.35'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'

    testImplementation 'org.openjdk.jol:jol-core:0.10'
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(17)
}

java {
    withSourcesJar()
}

jar {
    manifest {
        attributes(
                "Specification-Title": project.name,
                "Specification-Vendor": "BloCamLimb",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "BloCamLimb",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        )
    }
}
